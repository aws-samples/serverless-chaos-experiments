---
#==================================================
# SSM Automation Document / Runbook:
# Defines the configuration as well as the
# the steps to be run by SSM Automation
#==================================================

description: |
  ### Document Name - HandlerReplacement-FIS-Automation-Doc

  ## What does this document do?
  This document replaces the lamda handler with a Chaos lambda layer to conduct chaos experiments. 
  The information about the original handler and the experimental configuration are stored in the SSM Parameter store.
  https://docs.aws.amazon.com/lambda/latest/dg/chapter-layers.html 
  https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html

  See also for more information: https://aws.amazon.com/blogs/compute/building-resilient-serverless-applications-using-chaos-engineering/ 

  ## Security Risk
  Low: This is not a fault per se, but a configuration change.The change should be restricted by a strict IAM role that only allows changing a particular ParameterName. https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-access.html

  ## Input Parameters
  * AutomationAssumeRole: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
  * FunctionName: (Required) The name (or ARN) of the Lambda function to be used for the chaos experiments.
  * ChaosLayerArn: (Required) The ARN of the Lambda layer used to inject the chaos.
  * ChaosParameterName: (Required) The name of the chaos experiment configuration parameter to modify.
  * ChaosParameterValue: (Required) The value of the chaos experiment configuration parameter.
  * DurationMinutes: (Optional) ** Default 1 minute ** Maximum duration the fault can exist for.

  ## Supports Rollback
  Yes. The configuration is reverted to the original handler and the experiment is disabled (no chaos injected).

  ## Cancellation behaviour
  The configuration is reverted to the original handler and the experiment is disabled (no chaos injected).  

  ## Output Parameters
  This document has no outputs.

  ## Minimum Permissions Required
  * ssm:PutParameter
  * ssm:LabelParameterVersion
  * ssm:DescribeDocumentParameters
  * ssm:GetParameters
  * ssm:GetParameter
  * ssm:DescribeParameters
  * lambda:UpdateFunctionConfiguration
  * lambda:GetFunctionConfiguration
  * lambda:GetFunction
  * lambda:GetLayerVersion

  ## Additional Permissions for logging
  * logs:CreateLogStream
  * logs:CreateLogGroup
  * logs:PutLogEvents
  * logs:DescribeLogGroups
  * logs:DescribeLogStreams

schemaVersion: "0.3"

#==================================================
# Role assumed my the automation document / runbook
#==================================================
assumeRole: "{{ AutomationAssumeRole }}"

#==================================================
# SSM automation document parameters
#==================================================

parameters:
  FunctionName:
    type: String
    description: "(Required) The name (or ARN) of the Lambda function to be used for the chaos experiments."
  ChaosLayerArn:
    type: String
    description: "(Required) The ARN of the Lambda layer used to inject the chaos."
  ChaosParameterName:
    type: String
    description: "(Required) The name of the chaos experiment configuration parameter to modify."
  ChaosParameterValue:
    type: String
    description: "(Required) The value of the chaos experiment configuration parameter."
  DurationMinutes:
    type: String
    description: "The duration - in ISO-8601 format - until rollback. (Required)"
    default: "PT1M"
  AutomationAssumeRole:
    type: String
    description:
      "(Optional) The ARN of the role that allows Automation to perform
      the actions on your behalf."

#==================================================
# Automation steps
#==================================================

mainSteps:
  - name: putParameter
    description: Adding value to a particular parameter
    onFailure: "step:rollbackParameter"
    onCancel: "step:rollbackParameter"
    action: "aws:executeAwsApi"
    inputs:
      Service: ssm
      Api: PutParameter
      Name: '{{ ChaosParameterName }}'
      Value: '{{ ChaosParameterValue }}'
      Type: String
      Overwrite: true

  - name: replaceHandler
    description: Changing the Lambda configuration and adding the Chaos Lambda Layer
    onFailure: "step:rollbackParameter"
    onCancel: "step:rollbackParameter"
    action: "aws:executeScript"
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        FunctionName: "{{ FunctionName }}"
        LayerArn: "{{ ChaosLayerArn }}"
      Script: |-
        import boto3

        def handler(event, context):
          # get existing handler
          function_name = event["FunctionName"]
          layer_arn = event["LayerArn"]
          lambda_client = boto3.client("lambda")
          lambda_config_existing = lambda_client.get_function_configuration(FunctionName=function_name)

          # get existing handler and timeout
          lambda_runtime = lambda_config_existing['Runtime']
          existing_handler = lambda_config_existing['Handler']
          existing_timeout = lambda_config_existing['Timeout']
          existing_memory = lambda_config_existing['MemorySize']

          # save values in param store for later use
          ssm_client = boto3.client("ssm")
          ssm_client.put_parameter(Name='/ChaosInjection/' + function_name + '_handler_ssmparam', Value=existing_handler,Type='String',Overwrite=True)
          ssm_client.put_parameter(Name='/ChaosInjection/' + function_name + '_timeout_ssmparam', Value=str(existing_timeout),Type='String',Overwrite=True)
          ssm_client.put_parameter(Name='/ChaosInjection/' + function_name + '_memory_ssmparam', Value=str(existing_memory),Type='String',Overwrite=True)
        
          # Update target lambda - inject chaos layer, update handler and update the timeout to 5 mins to allow for latency injection. 
          new_handler="pychaoslayer.layer_handler"
          lambda_config_details = lambda_client.update_function_configuration(FunctionName=function_name,Layers=[layer_arn], Timeout=300,Handler=new_handler)

          return


  - name: sleep
    action: aws:sleep
    onFailure: "step:rollbackParameter"
    onCancel: "step:rollbackParameter"
    inputs:
      Duration: "{{ DurationMinutes }}"

  - name: rollbackParameter
    description: Rolling back value to a particular parameter
    action: "aws:executeAwsApi"
    inputs:
      Service: ssm
      Api: PutParameter
      Name: '{{ ChaosParameterName }}'
      Value: '{ "is_enabled": false }'
      Type: String
      Overwrite: true

  - name: removeLayer
    action: aws:executeScript
    inputs:
      Runtime: python3.7
      Handler: handler
      InputPayload:
        FunctionName: "{{ FunctionName }}"
        LayerArn: "{{ ChaosLayerArn }}"
      Script: |-
        import boto3

        def handler(event, context):
          # get existing handler
          function_name = event["FunctionName"]
          layer_arn = event["LayerArn"]
        
          # get older values  in param store for rollback
          ssm_client = boto3.client("ssm")
          old_handler = ssm_client.get_parameter(Name='/ChaosInjection/' + function_name + '_handler_ssmparam')['Parameter']['Value']
          old_timeout= ssm_client.get_parameter(Name='/ChaosInjection/' + function_name + '_timeout_ssmparam')['Parameter']['Value']
          old_memory= ssm_client.get_parameter(Name='/ChaosInjection/' + function_name + '_memory_ssmparam')['Parameter']['Value']

          # Update target lambda - remove layer, and revert handler and timeout

          lambda_client = boto3.client("lambda") 
          current_config = lambda_client.get_function(FunctionName=function_name)
        
          current_layers = current_config['Configuration']['Layers']
          remove_layers = [layer for layer in current_layers if layer['Arn'] != layer_arn ]
        
          lambda_config_details = lambda_client.update_function_configuration(FunctionName=function_name,Layers=remove_layers ,Timeout=int(old_timeout),Handler=old_handler,Environment={},MemorySize=int(old_memory)) 
          return               